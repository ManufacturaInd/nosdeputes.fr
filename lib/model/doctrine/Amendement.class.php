<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Amendement extends BaseAmendement {
    public function setAuteurs($auteurs) {
      $debug = false;
      if ($debug) $save = sprintf($auteurs);
      $groupe = null;
      $sexe = null;
      if ($debug) print "0: ".$auteurs."\n";
      if (preg_match('/^\s*(.*),+\s*les\s+(.*\s+[gG]roupe|membres)\s+(.*)\s*$/' ,$auteurs, $match)) {
        $auteurs = $match[1];
        $groupe = preg_replace("/^\s*(de la|de l'|du)\s*/", "", $match[3]);
        if ($debug) print "4: ".$auteurs." // ".$groupe."\n";
      }
      if ($debug) print "4: ".$auteurs." // ".$groupe."\n";
      $arr = preg_split('/,/', $auteurs);
      foreach ($arr as $depute) {
        $bool = false;
        if (preg_match('/^\s*(M+[\s\.ml]{1})[a-z]*\s*([dA-Z\s].*)\s*$/', $depute, $match)) {
          $nom = $match[2];
          if (preg_match('/M[ml]/', $match[1]))
            $sexe = 'F';
          else $sexe = 'H';
          $bool = $this->addParlementaireByNom($nom, $sexe, $groupe, $debug);
        } else if (preg_match('/(gouvernement|président|rapporteur|commission|questeur)/i', $depute)) {
          if ($debug) print "5 skip: "."  ".$depute."\n";
        } else $bool = $this->addParlementaireByNom($depute, $sexe, $groupe, $debug);
    //    if (!$bool && $debug) print "6: "."  source : ".$save."\n";
      }
    }

    public function addParlementaireByNom($nom, $sexe, $groupe, $debug) {
        if ($debug) print "5: "."  ".$nom." // ".$sexe." // ".$groupe."\n";
        $memeNom = Doctrine::getTable('Parlementaire')->findByNom($nom);
        if (count($memeNom) == 0) {
            $memeNom = Doctrine::getTable('Parlementaire')->findByNomDeFamille($nom);
        }
        if (count($memeNom) == 0 && preg_match('/([A-Z].*) ([A-Z].*)/', $nom, $match)) {
            $revert_nom = $match[2]." ".$match[1];
            $memeNom = Doctrine::getTable('Parlementaire')->findByNom($revert_nom);
        }
        if (count($memeNom) == 0) {
            $depute = Doctrine::getTable('Parlementaire')->similarTo($nom);
        }
        else if (count($memeNom) == 1) {
            $depute = $memeNom[0];
        }
        else if ($sexe) foreach ($memeNom as $de) {
         //   print $de->nom." ".$de->sexe.' '.$de->nom_de_famille." ; ";
            if ($de->sexe == $sexe) {
                if (!$depute) $depute = $de;
                else {
                  unset($memenom);
                  print "ERROR: Plusieurs députés de meme sexe et nom : ".$nom." sexe: ".$sexe." groupe: ".$groupe."\n";
                  // try to find by groupe, if groupe unset try with previous auteurs ex: Cochet amdmt 1630 69, 7_28.txt
                  return false;
                }
            }
        }
        unset($memenom);
        if (!$depute) {
             print "ERROR json: Auteur d'amendement inconnu : ".$nom." sexe: ".$sexe." groupe: ".$groupe."\n";
             return false;
        }
        foreach($this->getParlementaires() as $par) {
          if ($par == $depute)
            $depute->free();
            return true;
          }
        $pa = new ParlementaireAmendement();
        $pa->_set('Parlementaire', $depute);
        $pa->_set('Amendement', $this);
        $depute->free();
        return $pa->save();
    }

    public function setSort($sort) {
// parse sort to fit enum
    }
}