<?php

require_once "myTools.class.php";

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Organisme extends BaseOrganisme
{
  public function getLink() {
    sfProjectConfiguration::getActive()->loadHelpers(array('Url'));
    return url_for('@list_parlementaires_organisme?slug='.$this->slug);
  }
  public function getTitre() {
    if ($this->type === "groupe")
      return $this->getNom().' ('.$this->getSmallNomGroupe().')';
    else return $this->getNom();
  }
  public function getPersonne() {
    return '';
  }
  public function __tostring() {
    return substr($this->getTitre(), 0, 100);
  }
  public function getSmallNomGroupe() {
    $hashmap = array(
        "Union pour un Mouvement Populaire" => "UMP",
        "Socialiste" => "SOC",
        "Rassemblement Démocratique et Social Européen" => "RDSE",
        "Communiste, Républicain, Citoyen et des Sénateurs du Parti de Gauche" => "CRC-SPG",
        "Réunion administrative des Sénateurs ne figurant sur la liste d'aucun groupe politique" => "NI",
        "Union centriste" => "UC"
    );
    if (isset($hashmap[$this->getNom()]))
      return $hashmap[$this->getNom()];
    return "";
  }

  public function getCouleur() {
    $hashmap = array(
        "Union pour un Mouvement Populaire" => "30,30,200",
        "Socialiste" => "255,50,190",
        "Rassemblement Démocratique et Social Européen" => "255,150,150",
        "Communiste, Républicain, Citoyen et des Sénateurs du Parti de Gauche" => "255,30,30",
        "Réunion administrative des Sénateurs ne figurant sur la liste d'aucun groupe politique" => "200,200,200",
        "Union centriste" => "30,190,255"
    );
    return '<span style=\'background-color: rgb('.$hashmap[$this->getNom()].');\'>&nbsp;&nbsp;</span>';
  }
  public static function getNomByAcro($acro) {
    $acro = strtolower($acro);
    if (preg_match('/^(ump|soc|rdse|ni|uc|crc-spg)$/i', $acro)) {
      $hashmap = array(
         "ump" => "Union pour un Mouvement Populaire",
         "soc" => "Socialiste",
         "rdse" => "Gauche démocrate et républicaine",
         "ni" => "Réunion administrative des Sénateurs ne figurant sur la liste d'aucun groupe politique",
         "uc" => "Union centriste",
	 "crc-spg" => "Communiste, Républicain, Citoyen et des Sénateurs du Parti de Gauche" );
      return $hashmap["$acro"];
    } else {
      return false;
    }
  }
  public function getSeanceByDateAndMomentOrCreateIt($date, $moment, $session = null) {
    $seance = $this->getSeanceByDateAndMoment($date, $moment);
    if (!$seance) {
      $seance = new Seance();
      $seance->type = 'commission';
      $seance->setDate($date);
      $seance->moment = Seance::convertMoment($moment);
      $seance->Organisme = $this;
      $seance->setSession($session);
      $seance->save();
    }
    return $seance;
  }

  public function getNom() {
    if ($this->_get('nom') == 'Sénat')
      return "Bureau du Sénat";
    else return ucfirst($this->_get('nom'));
  }

  public function getSeanceByDateAndMoment($date, $moment) {
    $moment = Seance::convertMoment($moment);
    $q = Doctrine::getTable('Seance')->createQuery('s');
    $q->where("organisme_id = ?", $this->id)->andWhere('date = ?', $date)->andWhere('moment = ?', $moment);
    $res = $q->fetchOne();
    $q->free();
    unset($q);
    if ($res) {
      return $res;
    }
    $q = Doctrine::getTable('Seance')->createQuery('s');
    $q->where("organisme_id = ?", $this->id)->andWhere('date = ?', $date);
    if (count($q->fetchArray()) && preg_match('/(\d+)[:](\d+)/', $moment, $match)) {
      $q = Doctrine::getTable('Seance')->createQuery('s');
      $q->where("organisme_id = ?", $this->id)->andWhere('date = ?', $date)->andWhere('moment LIKE ?', $match[1].':%');
      $res = $q->fetchOne();
      $q->free();
      unset($q);
    }
    return $res;
  }

  public function getIsToIndex() {
    if ($this->type === "extra")
      return false;
    return true;
  }

  public function getHasParlementaires() {
    if (count($this->getParlementaires()))
      return true;
    return false;
  }
}
