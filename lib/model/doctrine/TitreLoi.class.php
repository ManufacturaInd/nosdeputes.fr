<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TitreLoi extends BaseTitreLoi
{

  public function setAuteur($depute) {
    $sexe = null;
    if (preg_match('/^\s*(M+[\s\.ml]{1})[a-z]*\s*([dA-Z].*)\s*$/', $depute, $match)) {
        $nom = $match[2];
        if (preg_match('/M[ml]/', $match[1]))
          $sexe = 'F';
        else $sexe = 'H';
    } else $nom = preg_replace("/^\s*(.*)\s*$/", "\\1", $depute);
    $depute = Doctrine::getTable('Parlementaire')->findOneByNomSexeGroupeCirco($nom, $sexe);
    if (!$depute) print "ERROR: Auteur introuvable in ".$this->source." : ".$nom." // ".$sexe."\n";
    else {
      $this->_set('Parlementaire', $depute);
      $depute->free();
    }
  }

  public function setLevel($level, $value) {
    $this->_set('level'.$level, $value);
  }

  public static function findLevel($levels = array(0,0,0,0)) {
    for ($i = 3; $i >= 0; $i--)
      if ($levels[$i]) return $i+1;
    return 0;
  }

  public function getLevel() {
    $levels = array();
    for ($i = 1; $i < 5; $i++)
      $levels[] = $this->_get('level'.$i, 0);
    return self::findLevel($levels);
  }

  public function getLevelValue($level) {
    if ($level != 1 && $level != 2 && $level != 3 && $level != 4)
      return '';
    return $this->_get('level'.$level);
  }

  public function getUrl() {
    $level = $this->getLevel();
    if (!$level)
      return '@loi?loi='.$this->texteloi_id;
    $args = "?loi=".$this->texteloi_id;
    for ($i = 1; $i <= $level; $i++)
      $args .= "&level".$i."=".$this->_get('level'.$i);
    return '@loi_level'.$level.$args;
  }

  public function getShortLevelTitre() {
    if ($this->getLevel())
      return ucfirst($this->leveltype).' '.$this->_get('level'.$this->getLevel());
    return '';
  }

  public function getLevelTitre() {
    $titre = ucfirst($this->titre);
    if ($this->getShortLevelTitre())
      $titre = $this->getShortLevelTitre()."&nbsp;: ".$titre;
    return $titre;
  }

  public function getHierarchie() {
    if (!$this->getLevel())
      return ''; 
    sfProjectConfiguration::getActive()->loadHelpers(array('Url'));
    $titreparent = '<a href="'.url_for($this->getUrl()).'">'.$this->getShortLevelTitre()."</a>";
    if ($this->getLevel() > 1) {
      $parent = $this->TitreLoi;
      $titreparent = $parent->getHierarchie()." - ".$titreparent;
    }
    return $titreparent;
  }

  public function getDossier() {
    $section = Doctrine_Query::create()
      ->select('s.id')
      ->from('Section s, Tagging ta, Tag t')
      ->where('s.section_id = s.id')
      ->andWhere('ta.taggable_id = s.id')
      ->andWhere('ta.tag_id = t.id')
      ->andWhere('ta.taggable_model = ?', "Section")
      ->andWhere('t.name = ?', "loi:numero=".preg_replace('/^(\d+)-.*/', '\\1', $this->texteloi_id))
      ->fetchOne();
    return $section;
  }

  public function getVoisins() {
    $result = array("","");
    $level = $this->getLevel();
    if (!$level)
      return $result;
    $levelstr = "level".$level;
    $levelvalue = $this->_get($levelstr);
    $levels = array(0,0,0,0);
    for ($i = 1; $i < $level; $i++)
      $levels[$i-1] = $this->_get('level'.$i);
    if (preg_match('/^(\d+)\s+bis$/',$levelvalue, $match)) {
      $result[0] = $match[1];
      $levels[$levelvalue] = $match[1] + 1;
      if (Doctrine::getTable('TitreLoi')->findLevel($this->texteloi_id, $levels))
        $result[1] = $match[1] + 1;
    } else {
      $pre = $levelvalue - 1;
      $qvoisins = Doctrine::getTable('TitreLoi')->createQuery('c')
        ->select('c.'.$levelstr)
        ->where('c.texteloi_id = ?', $this->texteloi_id);
      for ($i = 1; $i < $level; $i++)
        $qvoisins->andWhere('c.level'.$i.' = ?', $levels[$i-1]);
      for ($i = $level + 1; $i < 5; $i++)
        $qvoisins->andWhere('c.level'.$i.' IS NULL');
      $voisins = $qvoisins->andWhereIn('c.'.$levelstr, array($pre, $pre." bis", $levelvalue." bis", $levelvalue + 1))
        ->orderBy('c.'.$levelstr)
        ->fetchArray();
      $ct = count($voisins);
      if ($ct == 1) {
        if ($levelvalue == 1) $result[1] = $voisins[0][$levelstr];
        else $result[0] = $voisins[0][$levelstr];
      } else if ($ct == 2) {
        if ($levelvalue == 1)
          $result[1] = $voisins[0][$levelstr];
        else if (preg_match('/^(\d+)\s+bis$/', $voisins[1][$levelstr], $match) && $match[1] < $levelvalue)
          $result[0] = $voisins[1][$levelstr];
        else {
          $result[0] = $voisins[0][$levelstr];
          $result[1] = $voisins[1][$levelstr];
        }
      } else if ($ct > 2) {
        if (preg_match('/bis/', $voisins[1][$levelstr]) && preg_match('/bis/', $voisins[2][$levelstr])) {
          $result[0] = $voisins[1][$levelstr];
          $result[1] = $voisins[2][$levelstr];
        } else {
          $result[0] = $voisins[0][$levelstr];
          if (preg_match('/'.$n_section.'/', $voisins[1][$levelstr])) {
            $result[0] = $voisins[0][$levelstr];
            $result[1] = $voisins[1][$levelstr];
          } else {
            $result[0] = $voisins[1][$levelstr];
            $result[1] = $voisins[2][$levelstr];
          }
        }
      }
    }
    return $result;
  }

}
